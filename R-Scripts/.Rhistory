legend("topright", legend= levels(subfam), col=palette(), pch=rep(19,14) )
#setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark = readland.tps("DATA_GEL_ICH.TPS",specID = "ID", readcurves = F, warnmsg = TRUE)
landmark2 = readland.tps("DATA_ALT_FOTO.tps",specID = "ID", readcurves = F, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
foto = as.factor( substr( dimnames(landmark)[[3]], 24,24))
species1 = as.factor( substr( dimnames(landmark2)[[3]], 1, 6))
tribe1 = as.factor( substr( dimnames(landmark2)[[3]], 17, 19))
foto1 = as.factor( substr( dimnames(landmark2)[[3]], 24,24))
subfam1 = if(as.factor( substr(dimnames(landmark2)[[3]], 24,24)) == foto1){ foto1}else {as.factor( substr( dimnames(landmark2)[[3]], 8, 13))}
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD2<-gpagen(landmark2, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
PCA <-plotTangentSpace(proD$coords, groups=subfam, legend=T)
PCA1 <-plotTangentSpace(proD2$coords, groups=subfam1, legend=T)
#setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark = readland.tps("DATA_GEL_ICH.TPS",specID = "ID", readcurves = F, warnmsg = TRUE)
landmark2 = readland.tps("DATA_ALT_FOTO.tps",specID = "ID", readcurves = F, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
foto = as.factor( substr( dimnames(landmark)[[3]], 24,24))
species1 = as.factor( substr( dimnames(landmark2)[[3]], 1, 6))
tribe1 = as.factor( substr( dimnames(landmark2)[[3]], 17, 19))
foto1 = as.factor( substr( dimnames(landmark2)[[3]], 24,24))
subfam1 = if(as.factor( substr(dimnames(landmark2)[[3]], 24,24)) == "f"){ foto1}else {as.factor( substr( dimnames(landmark2)[[3]], 8, 13))}
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD2<-gpagen(landmark2, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
PCA <-plotTangentSpace(proD$coords, groups=subfam, legend=T)
PCA1 <-plotTangentSpace(proD2$coords, groups=subfam1, legend=T)
#setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark = readland.tps("DATA_GEL_ICH.TPS",specID = "ID", readcurves = F, warnmsg = TRUE)
landmark2 = readland.tps("DATA_ALT_FOTO.tps",specID = "ID", readcurves = F, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
foto = as.factor( substr( dimnames(landmark)[[3]], 24,24))
species1 = as.factor( substr( dimnames(landmark2)[[3]], 1, 6))
tribe1 = as.factor( substr( dimnames(landmark2)[[3]], 17, 19))
foto1 = as.factor( substr( dimnames(landmark2)[[3]], 24,24))
subfam1 = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
if(as.factor( substr(dimnames(landmark2)[[3]], 24,24)) == "f"){subfam1 = foto1}
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD2<-gpagen(landmark2, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
PCA <-plotTangentSpace(proD$coords, groups=subfam, legend=T)
PCA1 <-plotTangentSpace(proD2$coords, groups=subfam1, legend=T)
#setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark = readland.tps("DATA_GEL_ICH.TPS",specID = "ID", readcurves = F, warnmsg = TRUE)
landmark2 = readland.tps("DATA_ALT_FOTO.tps",specID = "ID", readcurves = F, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
foto = as.factor( substr( dimnames(landmark)[[3]], 24,24))
species1 = as.factor( substr( dimnames(landmark2)[[3]], 1, 6))
tribe1 = as.factor( substr( dimnames(landmark2)[[3]], 17, 19))
foto1 = as.factor( substr( dimnames(landmark2)[[3]], 24,24))
subfam1 = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
if(as.factor( substr(dimnames(landmark2)[[3]], 24,24)) == "f"){
subfam1 = foto1
}else{print("yes")}
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD2<-gpagen(landmark2, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
PCA <-plotTangentSpace(proD$coords, groups=subfam, legend=T)
PCA1 <-plotTangentSpace(proD2$coords, groups=subfam1, legend=T)
#setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark = readland.tps("DATA_GEL_ICH.TPS",specID = "ID", readcurves = F, warnmsg = TRUE)
landmark2 = readland.tps("DATA_ALT_FOTO.tps",specID = "ID", readcurves = F, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
foto = as.factor( substr( dimnames(landmark)[[3]], 24,24))
species1 = as.factor( substr( dimnames(landmark2)[[3]], 1, 6))
tribe1 = as.factor( substr( dimnames(landmark2)[[3]], 17, 19))
foto1 = as.factor( substr( dimnames(landmark2)[[3]], 24,24))
subfam1 = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
if(as.factor( substr(dimnames(landmark2)[[3]], 24,24)) == "f"){
subfam1 = foto1
}else{print("yes")}
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD2<-gpagen(landmark2, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
PCA <-plotTangentSpace(proD$coords, groups=subfam, legend=T)
PCA1 <-plotTangentSpace(proD2$coords, groups=subfam1, legend=T)
levels(subfam1) <- c(levels(subfam1), "f")
par(mar=c(2, 1, .1, .1)) # sets the margins
levels(subfam1) <- c(levels(subfam1), "f")
plot(PCA$pc.scores[,2],PCA$pc.scores[,3], col=subfam, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(foto), col=palette(), pch=rep(19,14) )
plot(PCA1$pc.scores[,2],PCA1$pc.scores[,3], col=cbind(subfam1,foto1), asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam), col=palette(), pch=rep(19,14) )
par(mar=c(2, 1, .1, .1)) # sets the margins
levels(subfam1) <- c(levels(subfam1), "f")
plot(PCA$pc.scores[,2],PCA$pc.scores[,3], col=subfam, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(foto), col=palette(), pch=rep(19,14) )
plot(PCA1$pc.scores[,2],PCA1$pc.scores[,3], subfam1+foto1, asp=T, las=1,pch=16, cex=1.5)
par(mar=c(2, 1, .1, .1)) # sets the margins
levels(subfam1) <- c(levels(subfam1), "f")
plot(PCA$pc.scores[,2],PCA$pc.scores[,3], col=subfam, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(foto), col=palette(), pch=rep(19,14) )
plot(PCA1$pc.scores[,2],PCA1$pc.scores[,3], col=subfam1+foto1, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam), col=palette(), pch=rep(19,14) )
legend("topright", legend= levels(subfam), col=palette(), pch=rep(19,14) )
legend("topright", legend= levels(subfam1), col=palette(), pch=rep(19,14) )
plot(PCA1$pc.scores[,2],PCA1$pc.scores[,3], col=foto1, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam1), col=palette(), pch=rep(19,14) )
legend("topright", legend= levels(foto1), col=palette(), pch=rep(19,14) )
plot(PCA1$pc.scores[,2],PCA1$pc.scores[,3], col=foto1, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(foto1), col=palette(), pch=rep(19,14) )
levels(subfam1)
subfam1
subfam1 <- subfam1[foto1 == "f"]
subfam1
subfam1 = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
foto1
subfam1[112:-1] <- "f"
levels(subfam1) <- c(levels(subfam1), "f")
subfam1[112:-1] <- "f"
subfam1[112:-1,] <- "f"
subfam1[112:125] <- "f"
subfam1
par(mar=c(2, 1, .1, .1)) # sets the margins
levels(subfam1) <- c(levels(subfam1), "f")
plot(PCA$pc.scores[,2],PCA$pc.scores[,3], col=subfam, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(foto), col=palette(), pch=rep(19,14) )
plot(PCA1$pc.scores[,2],PCA1$pc.scores[,3], col=subfam1, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam1), col=palette(), pch=rep(19,14) )
#setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark = readland.tps("DATA_GEL_ICH.TPS",specID = "ID", readcurves = T, warnmsg = TRUE)
landmark2 = readland.tps("DATA_ALT_FOTO.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
foto = as.factor( substr( dimnames(landmark)[[3]], 24,24))
species1 = as.factor( substr( dimnames(landmark2)[[3]], 1, 6))
tribe1 = as.factor( substr( dimnames(landmark2)[[3]], 17, 19))
foto1 = as.factor( substr( dimnames(landmark2)[[3]], 24,24))
subfam1 = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
levels(subfam1) <- c(levels(subfam1), "f")
subfam1[112:125] <- "f"
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL, curves = sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD2<-gpagen(landmark2, surfaces = NULL, curves = sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
PCA <-plotTangentSpace(proD$coords, groups=subfam, legend=T)
PCA1 <-plotTangentSpace(proD2$coords, groups=subfam1, legend=T)
par(mar=c(2, 1, .1, .1)) # sets the margins
levels(subfam1) <- c(levels(subfam1), "f")
plot(PCA$pc.scores[,2],PCA$pc.scores[,3], col=subfam, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(foto), col=palette(), pch=rep(19,14) )
plot(PCA1$pc.scores[,2],PCA1$pc.scores[,3], col=subfam1, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam1), col=palette(), pch=rep(19,14) )
#setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark = readland.tps("DATA_GEL_ICH.TPS",specID = "ID", readcurves = F, warnmsg = TRUE)
landmark2 = readland.tps("DATA_ALT_FOTO.tps",specID = "ID", readcurves = F, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
foto = as.factor( substr( dimnames(landmark)[[3]], 24,24))
species1 = as.factor( substr( dimnames(landmark2)[[3]], 1, 6))
tribe1 = as.factor( substr( dimnames(landmark2)[[3]], 17, 19))
foto1 = as.factor( substr( dimnames(landmark2)[[3]], 24,24))
subfam1 = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
levels(subfam1) <- c(levels(subfam1), "f")
subfam1[112:125] <- "f"
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL, curves = sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
#setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark = readland.tps("DATA_GEL_ICH.TPS",specID = "ID", readcurves = F, warnmsg = TRUE)
landmark2 = readland.tps("DATA_ALT_FOTO.tps",specID = "ID", readcurves = F, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
foto = as.factor( substr( dimnames(landmark)[[3]], 24,24))
species1 = as.factor( substr( dimnames(landmark2)[[3]], 1, 6))
tribe1 = as.factor( substr( dimnames(landmark2)[[3]], 17, 19))
foto1 = as.factor( substr( dimnames(landmark2)[[3]], 24,24))
subfam1 = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
levels(subfam1) <- c(levels(subfam1), "f")
subfam1[112:125] <- "f"
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD2<-gpagen(landmark2, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
PCA <-plotTangentSpace(proD$coords, groups=subfam, legend=T)
PCA1 <-plotTangentSpace(proD2$coords, groups=subfam1, legend=T)
par(mar=c(2, 1, .1, .1)) # sets the margins
levels(subfam1) <- c(levels(subfam1), "f")
plot(PCA$pc.scores[,2],PCA$pc.scores[,3], col=subfam, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(foto), col=palette(), pch=rep(19,14) )
plot(PCA1$pc.scores[,2],PCA1$pc.scores[,3], col=subfam1, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam1), col=palette(), pch=rep(19,14) )
par(mar=c(2, 1, .1, .1)) # sets the margins
levels(subfam1) <- c(levels(subfam1), "f")
plot(PCA$pc.scores[,2],PCA$pc.scores[,3], col=subfam, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(foto), col=palette(), pch=rep(19,14) )
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,3], col=subfam1, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam1), col=palette(), pch=rep(19,14) )
par(mar=c(2, 1, .1, .1)) # sets the margins
levels(subfam1) <- c(levels(subfam1), "f")
plot(PCA$pc.scores[,2],PCA$pc.scores[,3], col=subfam, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(foto), col=palette(), pch=rep(19,14) )
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,2], col=subfam1, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam1), col=palette(), pch=rep(19,14) )
par(mar=c(2, 1, .1, .1)) # sets the margins
levels(subfam1) <- c(levels(subfam1), "f")
plot(PCA$pc.scores[,2],PCA$pc.scores[,3], col=subfam, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(foto), col=palette(), pch=rep(19,14) )
plot(PCA1$pc.scores[,2],PCA1$pc.scores[,3], col=subfam1, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam1), col=palette(), pch=rep(19,14) )
par(mfrow=c(2,1)) # sets the margins
plot(PCA$pc.scores[,2],PCA$pc.scores[,3], col=subfam1, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam1), col=palette(), pch=rep(19,14) )
plot(PCA1$pc.scores[,2],PCA1$pc.scores[,3], col=subfam2, asp=T, las=1,pch=16, cex=1.5)
#setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark3 = readland.tps("DATA_GEL_ICH.TPS",specID = "ID", readcurves = F, warnmsg = TRUE)
landmark4 = readland.tps("DATA_ALT_FOTO.tps",specID = "ID", readcurves = F, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species1 = as.factor( substr( dimnames(landmark3)[[3]], 1, 6))
subfam1 = as.factor( substr( dimnames(landmark3)[[3]], 8, 13))
tribe1 = as.factor( substr( dimnames(landmark3)[[3]], 17, 19))
foto1 = as.factor( substr( dimnames(landmark3)[[3]], 24,24))
species2 = as.factor( substr( dimnames(landmark4)[[3]], 1, 6))
tribe2 = as.factor( substr( dimnames(landmark4)[[3]], 17, 19))
foto2 = as.factor( substr( dimnames(landmark4)[[3]], 24,24))
subfam2 = as.factor( substr( dimnames(landmark4)[[3]], 8, 13))
levels(subfam2) <- c(levels(subfam2), "f")
subfam2[112:125] <- "f"
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark3, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD2<-gpagen(landmark4, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
PCA <-plotTangentSpace(proD$coords, groups=subfam1, legend=T)
PCA1 <-plotTangentSpace(proD2$coords, groups=subfam2, legend=T)
par(mfrow=c(2,1)) # sets the margins
plot(PCA$pc.scores[,2],PCA$pc.scores[,3], col=subfam1, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam1), col=palette(), pch=rep(19,14) )
plot(PCA1$pc.scores[,2],PCA1$pc.scores[,3], col=subfam2, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam2), col=palette(), pch=rep(19,14) )
par(mfrow=c(1,2)) # sets the margins
plot(PCA$pc.scores[,2],PCA$pc.scores[,3], col=subfam1, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam1), col=palette(), pch=rep(19,14) )
plot(PCA1$pc.scores[,2],PCA1$pc.scores[,3], col=subfam2, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam2), col=palette(), pch=rep(19,14) )
par(mfrow=c(1,2)) # sets the margins
plot(PCA$pc.scores[,2],PCA$pc.scores[,3], col=subfam1, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam1), col=palette(), pch=rep(19,14) )
title(main="DataSet without Fotos", sub= "without Curves")
plot(PCA1$pc.scores[,2],PCA1$pc.scores[,3], col=subfam2, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam2), col=palette(), pch=rep(19,14) )
title(main="DataSet with Fotos", sub = "without Curves")
par(mfrow=c(1,2)) # sets the margins
plot(PCA$pc.scores[,2],PCA$pc.scores[,3], col=subfam1, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam1), col=palette(), pch=rep(19,14) )
title(main="DataSet without Fotos", sub= "without Curves")
plot(PCA1$pc.scores[,2],PCA1$pc.scores[,3], col=subfam2, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam2), col=palette(), pch=rep(19,14) )
title(main="DataSet with Fotos", sub = "without Curves")
install.packages("dendextend")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
require(rgl)
options(rgl.useNULL = TRUE) # Suppress the separate window.
knitr::knit_hooks$set(webgl = hook_webgl)
library(geomorph)
#setwd("~/GitHub/Ichneumonidae/R-Scripts")
#setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark = readland.tps("Curve_Testfile.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
landmark2 = readland.tps("Curve_Testfile.tps",specID = "ID", readcurves = F, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
areolet = as.factor( substr( dimnames(landmark)[[3]], 15, 15))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders0 = define.sliders(c(10,22:29,11))
sliders1 = define.sliders(c(15,30:37,16))
sliders2 = define.sliders(c(13,38:45,4))
sliders3 = rbind(define.sliders(c(15,30:37,16)),define.sliders(c(10,22:29,11)))
sliders4 = rbind(define.sliders(c(13,38:45,4)),define.sliders(c(10,22:29,11)))
sliders5 = rbind(define.sliders(c(13,38:45,4)),define.sliders(c(15,30:37,16)))
sliders6 = rbind(define.sliders(c(13,38:45,4)),define.sliders(c(15,30:37,16)),define.sliders(c(10,22:29,11)))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD0<-gpagen(landmark, surfaces = NULL, curves = sliders0,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD1<-gpagen(landmark, surfaces = NULL, curves = sliders1,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD2<-gpagen(landmark, surfaces = NULL, curves = sliders2,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD3<-gpagen(landmark, surfaces = NULL, curves = sliders3,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD4<-gpagen(landmark, surfaces = NULL, curves = sliders4,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD5<-gpagen(landmark, surfaces = NULL, curves = sliders5,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD6<-gpagen(landmark, surfaces = NULL, curves = sliders6,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD7<-gpagen(landmark2, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
PCA1 <-plotTangentSpace(proD0$coords, groups=tribe, legend=T)
PCA2 <-plotTangentSpace(proD1$coords, groups=tribe, legend=T)
PCA3 <-plotTangentSpace(proD2$coords, groups=tribe, legend=T)
PCA4 <-plotTangentSpace(proD3$coords, groups=tribe, legend=T)
PCA5 <-plotTangentSpace(proD4$coords, groups=tribe, legend=T)
PCA6 <-plotTangentSpace(proD5$coords, groups=tribe, legend=T)
PCA7 <-plotTangentSpace(proD6$coords, groups=tribe, legend=T)
PCA0 <-plotTangentSpace(proD7$coords, groups=tribe, legend=T)
par(mar = c(4,4, .1, .1), mfrow= c(2,3))
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
title("2m-cu")
plot(PCA2$pc.scores[,1],PCA2$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
plot(PCA3$pc.scores[,1],PCA3$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
plot(PCA4$pc.scores[,1],PCA4$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
plot(PCA5$pc.scores[,1],PCA5$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
plot(PCA6$pc.scores[,1],PCA6$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
par(mar = c(4,4, .1, .1), mfrow= c(2,4))
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+CU")
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
plot(PCA2$pc.scores[,1],PCA2$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-cu")
plot(PCA3$pc.scores[,1],PCA3$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "RS")
plot(PCA4$pc.scores[,1],PCA4$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "1M+Cu & 2m-cu")
plot(PCA5$pc.scores[,1],PCA5$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & RS")
plot(PCA6$pc.scores[,1],PCA6$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-Cu & RS")
plot(PCA7$pc.scores[,1],PCA7$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & 2m-cu & RS")
par(mar = c(mfrow= c(2,4))
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+CU")
par(mfrow= c(2,4))
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+CU")
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
plot(PCA2$pc.scores[,1],PCA2$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-cu")
plot(PCA3$pc.scores[,1],PCA3$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "RS")
plot(PCA4$pc.scores[,1],PCA4$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "1M+Cu & 2m-cu")
plot(PCA5$pc.scores[,1],PCA5$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & RS")
plot(PCA6$pc.scores[,1],PCA6$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-Cu & RS")
plot(PCA7$pc.scores[,1],PCA7$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & 2m-cu & RS")
par(mfrow= c(4,2))
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+CU")
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
plot(PCA2$pc.scores[,1],PCA2$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-cu")
plot(PCA3$pc.scores[,1],PCA3$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "RS")
plot(PCA4$pc.scores[,1],PCA4$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "1M+Cu & 2m-cu")
plot(PCA5$pc.scores[,1],PCA5$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & RS")
plot(PCA6$pc.scores[,1],PCA6$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-Cu & RS")
plot(PCA7$pc.scores[,1],PCA7$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & 2m-cu & RS")
par(mfrow= c(4,2))
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+CU")
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
plot(PCA2$pc.scores[,1],PCA2$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-cu")
plot(PCA3$pc.scores[,1],PCA3$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "RS")
plot(PCA4$pc.scores[,1],PCA4$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "1M+Cu & 2m-cu")
plot(PCA5$pc.scores[,1],PCA5$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & RS")
plot(PCA6$pc.scores[,1],PCA6$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-Cu & RS")
plot(PCA7$pc.scores[,1],PCA7$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & 2m-cu & RS")
par(mfrow= c(4,2))
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+CU")
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
plot(PCA2$pc.scores[,1],PCA2$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-cu")
plot(PCA3$pc.scores[,1],PCA3$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "RS")
plot(PCA4$pc.scores[,1],PCA4$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "1M+Cu & 2m-cu")
plot(PCA5$pc.scores[,1],PCA5$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & RS")
plot(PCA6$pc.scores[,1],PCA6$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-Cu & RS")
plot(PCA7$pc.scores[,1],PCA7$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & 2m-cu & RS")
par(mfrow= c(4,2))
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+CU")
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
plot(PCA2$pc.scores[,1],PCA2$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-cu")
plot(PCA3$pc.scores[,1],PCA3$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "RS")
plot(PCA4$pc.scores[,1],PCA4$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "1M+Cu & 2m-cu")
plot(PCA5$pc.scores[,1],PCA5$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & RS")
plot(PCA6$pc.scores[,1],PCA6$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-Cu & RS")
plot(PCA7$pc.scores[,1],PCA7$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & 2m-cu & RS")
par(mfrow= c(4,2))
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+CU")
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
plot(PCA2$pc.scores[,1],PCA2$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-cu")
plot(PCA3$pc.scores[,1],PCA3$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "RS")
plot(PCA4$pc.scores[,1],PCA4$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "1M+Cu & 2m-cu")
plot(PCA5$pc.scores[,1],PCA5$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & RS")
plot(PCA6$pc.scores[,1],PCA6$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-Cu & RS")
plot(PCA7$pc.scores[,1],PCA7$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & 2m-cu & RS")
par(mfrow= c(4,2))
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+CU")
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
plot(PCA2$pc.scores[,1],PCA2$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-cu")
plot(PCA3$pc.scores[,1],PCA3$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "RS")
plot(PCA4$pc.scores[,1],PCA4$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "1M+Cu & 2m-cu")
plot(PCA5$pc.scores[,1],PCA5$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & RS")
plot(PCA6$pc.scores[,1],PCA6$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-Cu & RS")
plot(PCA7$pc.scores[,1],PCA7$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & 2m-cu & RS")
par(mfrow= c(4,2))
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+CU")
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
plot(PCA2$pc.scores[,1],PCA2$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-cu")
plot(PCA3$pc.scores[,1],PCA3$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "RS")
plot(PCA4$pc.scores[,1],PCA4$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "1M+Cu & 2m-cu")
plot(PCA5$pc.scores[,1],PCA5$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & RS")
plot(PCA6$pc.scores[,1],PCA6$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-Cu & RS")
plot(PCA7$pc.scores[,1],PCA7$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & 2m-cu & RS")
par(mfrow= c(4,2))
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+CU")
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
plot(PCA2$pc.scores[,1],PCA2$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-cu")
plot(PCA3$pc.scores[,1],PCA3$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "RS")
plot(PCA4$pc.scores[,1],PCA4$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "1M+Cu & 2m-cu")
plot(PCA5$pc.scores[,1],PCA5$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & RS")
plot(PCA6$pc.scores[,1],PCA6$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-Cu & RS")
plot(PCA7$pc.scores[,1],PCA7$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & 2m-cu & RS")
par(mfrow= c(4,2))
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+CU")
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
plot(PCA2$pc.scores[,1],PCA2$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-cu")
plot(PCA3$pc.scores[,1],PCA3$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "RS")
plot(PCA4$pc.scores[,1],PCA4$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "1M+Cu & 2m-cu")
plot(PCA5$pc.scores[,1],PCA5$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & RS")
plot(PCA6$pc.scores[,1],PCA6$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-Cu & RS")
plot(PCA7$pc.scores[,1],PCA7$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & 2m-cu & RS")
par(mfrow= c(4,2))
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+CU")
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
plot(PCA2$pc.scores[,1],PCA2$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-cu")
plot(PCA3$pc.scores[,1],PCA3$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "RS")
plot(PCA4$pc.scores[,1],PCA4$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main = "1M+Cu & 2m-cu")
plot(PCA5$pc.scores[,1],PCA5$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & RS")
plot(PCA6$pc.scores[,1],PCA6$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "2m-Cu & RS")
plot(PCA7$pc.scores[,1],PCA7$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3, main= "1M+Cu & 2m-cu & RS")
