plot(PCA$pc.scores[,1],PCA$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
# use the text() function to get the names of individual points
text(PCA$pc.scores[,1],PCA$pc.scores[,2],labels=species,cex=0.7,pos=4)
dev.off()
## the more beautiful version:
mat <- matrix(c(4,5,0,1,1,2,1,1,3), 3)
layout(mat, widths=c(1,1,1), heights=c(1,1,1))# set the size of the rows and columns
par(mar=c(4, 4, 1, 1)) # sets the margins
plot(PCA$pc.scores[,1],PCA$pc.scores[,2], col=subfam, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam), col=palette(), pch=rep(19,14) )
segments(min(PCA$pc.scores[,1]), 0,  max(PCA$pc.scores[,1]),0, col="grey", lty="dashed")
segments(0, min(PCA$pc.scores[,2]), 0,  max(PCA$pc.scores[,2]), col="grey", lty="dashed")
# in order to name individuals: text(PCA$pc.scores[,1],PCA$pc.scores[,2], species)
ref <- mshape(proD$coords)
#qw= c(1,4,2,6,5,7,3)
par(mar = c(0,0,0,0)) # sets the margins
plotRefToTarget(ref,PCA$pc.shapes$PC1min)
# Item 3
plotRefToTarget(ref,PCA$pc.shapes$PC1max)
# Item 4
plotRefToTarget(ref,PCA$pc.shapes$PC2max)
# Item 5
plotRefToTarget(ref,PCA$pc.shapes$PC2min)
colors = c("red","cyan","magenta","yellow")[tribe]
plot3d(PCA$pc.scores[,1:3], col = colors, size = 9)
text3d(PCA$pc.scores[,1:3],texts=species,pos=4,cex= 0.6)
legend3d("topright", legend = c("Echthrini","Fossil", "Gelini", "Mesostenini"), col = c("red","cyan","magenta","yellow") , pch= 16)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
require(rgl)
options(rgl.useNULL = TRUE) # Suppress the separate window.
knitr::knit_hooks$set(webgl = hook_webgl)
library(geomorph)
setwd("~/GitHub/Ichneumonidae/R-Scripts")
setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark = readland.tps("DATA_GELINAE.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
areolet = as.factor( substr( dimnames(landmark)[[3]], 15, 15))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL, curves= sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
PCA <-plotTangentSpace(proD$coords, groups=tribe, legend=T)
PCA$pc.summary
dev.off()
#one can look at different PCA combinations to find the best model for its purpose
plot(PCA$pc.scores[,1],PCA$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
# use the text() function to get the names of individual points
text(PCA$pc.scores[,1],PCA$pc.scores[,2],labels=species,cex=0.7,pos=4)
dev.off()
## the more beautiful version:
mat <- matrix(c(4,5,0,1,1,2,1,1,3), 3)
layout(mat, widths=c(1,1,1), heights=c(1,1,1))# set the size of the rows and columns
par(mar=c(4, 4, 1, 1)) # sets the margins
plot(PCA$pc.scores[,1],PCA$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
segments(min(PCA$pc.scores[,1]), 0,  max(PCA$pc.scores[,1]),0, col="grey", lty="dashed")
segments(0, min(PCA$pc.scores[,2]), 0,  max(PCA$pc.scores[,2]), col="grey", lty="dashed")
# in order to name individuals: text(PCA$pc.scores[,1],PCA$pc.scores[,2], species)
ref <- mshape(proD$coords)
#qw= c(1,4,2,6,5,7,3)
par(mar = c(0,0,0,0)) # sets the margins
plotRefToTarget(ref,PCA$pc.shapes$PC1min)
# Item 3
plotRefToTarget(ref,PCA$pc.shapes$PC1max)
# Item 4
plotRefToTarget(ref,PCA$pc.shapes$PC2max)
# Item 5
plotRefToTarget(ref,PCA$pc.shapes$PC2min)
colors = c("red","cyan","magenta","yellow")[tribe]
plot3d(PCA$pc.scores[,1:3], col = colors, size = 9)
text3d(PCA$pc.scores[,1:3],texts=species,pos=4,cex= 0.6)
legend3d("topright", legend = c("Echthrini","Fossil", "Gelini", "Mesostenini"), col = c("red","cyan","magenta","yellow") , pch= 16)
PCA$pc.summary
data = data.frame(species, tribe, PCA$pc.scores[,1:6])
# Compute distances and hierarchical clustering
dd <- dist(scale(data[c(3:8)]), method = "euclidean")
## Ward's minimum variance method
hc <- hclust(dd, method = "ward.D2")
hc$labels = tribe
# Convert hclust into a dendrogram and plot
hcd <- as.dendrogram(hc)
require("dendextend") ## needs a dendrogram
#plot(hcd)
# Create a vector of colors, darkgreen if am is 0, green if 1.
my_colors <- ifelse(hc$labels=="ech", "cyan",ifelse(hc$labels=="gel","green", ifelse(hc$labels=="mes", "red","yellow")))
#my_colors <- ifelse(hc$labels=="scolob", "forestgreen",ifelse(hc$labels=="metopi", "green","yellow"))
par(mar=c(10,1,1,1))
hcd %>%
set("labels_col", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"), k=13) %>%
set("branches_k_color", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"),k = 13) %>%
set("labels_cex", 0.8)  %>%
set("leaves_pch", 19)  %>%
set("nodes_cex", 0.4) %>%
plot(axes=FALSE)
# Add the colored bar
colored_bars(colors = my_colors, dend = hcd, rowLabels = "tribe")
legend("topright", legend=levels(tribe), col= c("cyan", "yellow", "green", "red"), pch=15)
PCA$pc.summary
data = data.frame(species, tribe, PCA$pc.scores[,1:12])
# Compute distances and hierarchical clustering
dd <- dist(scale(data[c(3:14)]), method = "euclidean")
## Ward's minimum variance method
hc <- hclust(dd, method = "ward.D2")
hc$labels = tribe
# Convert hclust into a dendrogram and plot
hcd <- as.dendrogram(hc)
require("dendextend") ## needs a dendrogram
#plot(hcd)
# Create a vector of colors, darkgreen if am is 0, green if 1.
my_colors <- ifelse(hc$labels=="ech", "cyan",ifelse(hc$labels=="gel","green", ifelse(hc$labels=="mes", "red","yellow")))
#my_colors <- ifelse(hc$labels=="scolob", "forestgreen",ifelse(hc$labels=="metopi", "green","yellow"))
par(mar=c(10,1,1,1))
hcd %>%
set("labels_col", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"), k=13) %>%
set("branches_k_color", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"),k = 13) %>%
set("labels_cex", 0.8)  %>%
set("leaves_pch", 19)  %>%
set("nodes_cex", 0.4) %>%
plot(axes=FALSE)
# Add the colored bar
colored_bars(colors = my_colors, dend = hcd, rowLabels = "tribe")
legend("topright", legend=levels(tribe), col= c("cyan", "yellow", "green", "red"), pch=15)
PCA$pc.summary
data = data.frame(species, tribe, PCA$pc.scores[,1:22])
# Compute distances and hierarchical clustering
dd <- dist(scale(data[c(3:24)]), method = "euclidean")
## Ward's minimum variance method
hc <- hclust(dd, method = "ward.D2")
hc$labels = tribe
# Convert hclust into a dendrogram and plot
hcd <- as.dendrogram(hc)
require("dendextend") ## needs a dendrogram
#plot(hcd)
# Create a vector of colors, darkgreen if am is 0, green if 1.
my_colors <- ifelse(hc$labels=="ech", "cyan",ifelse(hc$labels=="gel","green", ifelse(hc$labels=="mes", "red","yellow")))
#my_colors <- ifelse(hc$labels=="scolob", "forestgreen",ifelse(hc$labels=="metopi", "green","yellow"))
par(mar=c(10,1,1,1))
hcd %>%
set("labels_col", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"), k=13) %>%
set("branches_k_color", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"),k = 13) %>%
set("labels_cex", 0.8)  %>%
set("leaves_pch", 19)  %>%
set("nodes_cex", 0.4) %>%
plot(axes=FALSE)
# Add the colored bar
colored_bars(colors = my_colors, dend = hcd, rowLabels = "tribe")
legend("topright", legend=levels(tribe), col= c("cyan", "yellow", "green", "red"), pch=15)
PCA$pc.summary
data = data.frame(species, tribe, PCA$pc.scores[,1:10])
# Compute distances and hierarchical clustering
dd <- dist(scale(data[c(3:12)]), method = "euclidean")
## Ward's minimum variance method
hc <- hclust(dd, method = "ward.D2")
hc$labels = tribe
# Convert hclust into a dendrogram and plot
hcd <- as.dendrogram(hc)
require("dendextend") ## needs a dendrogram
#plot(hcd)
# Create a vector of colors, darkgreen if am is 0, green if 1.
my_colors <- ifelse(hc$labels=="ech", "cyan",ifelse(hc$labels=="gel","green", ifelse(hc$labels=="mes", "red","yellow")))
#my_colors <- ifelse(hc$labels=="scolob", "forestgreen",ifelse(hc$labels=="metopi", "green","yellow"))
par(mar=c(10,1,1,1))
hcd %>%
set("labels_col", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"), k=13) %>%
set("branches_k_color", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"),k = 13) %>%
set("labels_cex", 0.8)  %>%
set("leaves_pch", 19)  %>%
set("nodes_cex", 0.4) %>%
plot(axes=FALSE)
# Add the colored bar
colored_bars(colors = my_colors, dend = hcd, rowLabels = "tribe")
legend("topright", legend=levels(tribe), col= c("cyan", "yellow", "green", "red"), pch=15)
PCA$pc.summary
data = data.frame(species, tribe, PCA$pc.scores[,1:7])
# Compute distances and hierarchical clustering
dd <- dist(scale(data[c(3:9)]), method = "euclidean")
## Ward's minimum variance method
hc <- hclust(dd, method = "ward.D2")
hc$labels = tribe
# Convert hclust into a dendrogram and plot
hcd <- as.dendrogram(hc)
require("dendextend") ## needs a dendrogram
#plot(hcd)
# Create a vector of colors, darkgreen if am is 0, green if 1.
my_colors <- ifelse(hc$labels=="ech", "cyan",ifelse(hc$labels=="gel","green", ifelse(hc$labels=="mes", "red","yellow")))
#my_colors <- ifelse(hc$labels=="scolob", "forestgreen",ifelse(hc$labels=="metopi", "green","yellow"))
par(mar=c(10,1,1,1))
hcd %>%
set("labels_col", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"), k=13) %>%
set("branches_k_color", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"),k = 13) %>%
set("labels_cex", 0.8)  %>%
set("leaves_pch", 19)  %>%
set("nodes_cex", 0.4) %>%
plot(axes=FALSE)
# Add the colored bar
colored_bars(colors = my_colors, dend = hcd, rowLabels = "tribe")
legend("topright", legend=levels(tribe), col= c("cyan", "yellow", "green", "red"), pch=15)
PCA$pc.summary
data = data.frame(species, tribe, PCA$pc.scores[,1:6])
# Compute distances and hierarchical clustering
dd <- dist(scale(data[c(3:8)]), method = "euclidean")
## Ward's minimum variance method
hc <- hclust(dd, method = "ward.D2")
hc$labels = tribe
# Convert hclust into a dendrogram and plot
hcd <- as.dendrogram(hc)
require("dendextend") ## needs a dendrogram
#plot(hcd)
# Create a vector of colors, darkgreen if am is 0, green if 1.
my_colors <- ifelse(hc$labels=="ech", "cyan",ifelse(hc$labels=="gel","green", ifelse(hc$labels=="mes", "red","yellow")))
#my_colors <- ifelse(hc$labels=="scolob", "forestgreen",ifelse(hc$labels=="metopi", "green","yellow"))
par(mar=c(10,1,1,1))
hcd %>%
set("labels_col", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"), k=13) %>%
set("branches_k_color", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"),k = 13) %>%
set("labels_cex", 0.8)  %>%
set("leaves_pch", 19)  %>%
set("nodes_cex", 0.4) %>%
plot(axes=FALSE)
# Add the colored bar
colored_bars(colors = my_colors, dend = hcd, rowLabels = "tribe")
legend("topright", legend=levels(tribe), col= c("cyan", "yellow", "green", "red"), pch=15)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
require(rgl)
options(rgl.useNULL = TRUE) # Suppress the separate window.
knitr::knit_hooks$set(webgl = hook_webgl)
library(geomorph)
setwd("~/GitHub/Ichneumonidae/R-Scripts")
setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark = readland.tps("TOWNES VS BROAD.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark = readland.tps("DATA_MODERN_TAX.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
areolet = as.factor( substr( dimnames(landmark)[[3]], 15, 15))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL, curves= sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
PCA <-plotTangentSpace(proD$coords, groups=subfam, legend=T)
#PCA$pc.summary
dev.off()
#one can look at different PCA combinations to find the best model for its purpose
plot(PCA$pc.scores[,1],PCA$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
# use the text() function to get the names of individual points
text(PCA$pc.scores[,1],PCA$pc.scores[,2],labels=species,cex=0.7,pos=4)
dev.off()
PCA <-plotTangentSpace(proD$coords, groups=subfam, legend=T)
plot(PCA$pc.scores[,1],PCA$pc.scores[,2], col=subfam, asp=T, las=1,pch=16, cex=1.3)
legend("topright", legend= levels(subfam), col=palette(), pch=rep(19,14) )
# use the text() function to get the names of individual points
text(PCA$pc.scores[,1],PCA$pc.scores[,2],labels=species,cex=0.7,pos=4)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
require(rgl)
options(rgl.useNULL = TRUE) # Suppress the separate window.
knitr::knit_hooks$set(webgl = hook_webgl)
library(geomorph)
#setwd("~/GitHub/Ichneumonidae/R-Scripts")
#setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark = readland.tps("FOTO_ICHNEU.TPS",specID = "ID", readcurves = T, warnmsg = TRUE)
landmark2 = readland.tps("FOTO_ICHNEU.tps",specID = "ID", readcurves = F, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
areolet = as.factor( substr( dimnames(landmark)[[3]], 15, 15))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
foto = as.factor( substr( dimnames(landmark)[[3]], 24,24))
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL, curves = sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD2<-gpagen(landmark2, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
specie
species
landmark <- landmark[-1:4]
landmark <- landmark[!1:4]
#setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark = readland.tps("FOTO_ICHNEU.TPS",specID = "ID", readcurves = T, warnmsg = TRUE)
landmark <- landmark[,,!1:4]
#setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark = readland.tps("FOTO_ICHNEU.TPS",specID = "ID", readcurves = T, warnmsg = TRUE)
landmark2 = readland.tps("FOTO_ICHNEU.tps",specID = "ID", readcurves = F, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
landmark <- landmark[,,-1:4]
landmark != landmark[,,1:4]
landmark <- landmark[,,-(1:4)]
lamdnark2 <- landmark2[,,-(1:4)]
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
areolet = as.factor( substr( dimnames(landmark)[[3]], 15, 15))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
foto = as.factor( substr( dimnames(landmark)[[3]], 24,24))
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL, curves = sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD2<-gpagen(landmark2, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
par(mfrow= c(1,2))
PCA <-plotTangentSpace(proD$coords, groups=foto, legend=T)
legend("topright", legend= levels(foto), col=palette(), pch=rep(19,14) )
title(main = "Foto vs Illustrations - With curves")
PCA1 <-plotTangentSpace(proD2$coords, groups=foto, legend=T)
legend("topright", legend= levels(foto), col=palette(), pch=rep(19,14) )
title(main = "Foto vs Illustrations - Without Curves")
## the more beautiful version:
mat <- matrix(c(4,5,0,1,1,2,1,1,3), 3)
layout(mat, widths=c(1,1,1), heights=c(1,1,1))# set the size of the rows and columns
par(mar=c(4, 4, 1, 1)) # sets the margins
plot(PCA$pc.scores[,2],PCA$pc.scores[,3], col=foto, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(foto), col=palette(), pch=rep(19,14) )
segments(min(PCA$pc.scores[,2]), 0,  max(PCA$pc.scores[,2]),0, col="grey", lty="dashed")
segments(0, min(PCA$pc.scores[,3]), 0,  max(PCA$pc.scores[,3]), col="grey", lty="dashed")
# in order to name individuals: text(PCA$pc.scores[,1],PCA$pc.scores[,2], species)
ref <- mshape(proD$coords)
#qw= c(1,4,2,6,5,7,3)
par(mar = c(0,0,0,0)) # sets the margins
plotRefToTarget(ref,PCA$pc.shapes$PC1min)
# Item 3
plotRefToTarget(ref,PCA$pc.shapes$PC1max)
# Item 4
plotRefToTarget(ref,PCA$pc.shapes$PC2max)
# Item 5
plotRefToTarget(ref,PCA$pc.shapes$PC2min)
colors = c("red","cyan")[subfam]
plot3d(PCA1$pc.scores[,1:3], col = colors, size = 9)
text3d(PCA1$pc.scores[,1:3],texts=species,pos=4,cex= 0.6)
legend3d("topright", legend = c("Gelinae","Ichneumoninae"), col = c("red","cyan") , pch= 16)
#setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark3 = readland.tps("DATA_GEL_ICH.TPS",specID = "ID", readcurves = F, warnmsg = TRUE)
landmark4 = readland.tps("DATA_ALT_FOTO.tps",specID = "ID", readcurves = F, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species1 = as.factor( substr( dimnames(landmark3)[[3]], 1, 6))
subfam1 = as.factor( substr( dimnames(landmark3)[[3]], 8, 13))
tribe1 = as.factor( substr( dimnames(landmark3)[[3]], 17, 19))
foto1 = as.factor( substr( dimnames(landmark3)[[3]], 24,24))
species2 = as.factor( substr( dimnames(landmark4)[[3]], 1, 6))
tribe2 = as.factor( substr( dimnames(landmark4)[[3]], 17, 19))
foto2 = as.factor( substr( dimnames(landmark4)[[3]], 24,24))
subfam2 = as.factor( substr( dimnames(landmark4)[[3]], 8, 13))
levels(subfam2) <- c(levels(subfam2), "f")
subfam2[112:125] <- "f"
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark3, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD2<-gpagen(landmark4, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
PCA <-plotTangentSpace(proD$coords, groups=subfam1, legend=T)
PCA1 <-plotTangentSpace(proD2$coords, groups=subfam2, legend=T)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
require(rgl)
options(rgl.useNULL = TRUE) # Suppress the separate window.
knitr::knit_hooks$set(webgl = hook_webgl)
library(geomorph)
#setwd("~/GitHub/Ichneumonidae/R-Scripts")
#setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark = readland.tps("FOTO_ICHNEU.TPS",specID = "ID", readcurves = T, warnmsg = TRUE)
landmark2 = readland.tps("FOTO_ICHNEU.tps",specID = "ID", readcurves = F, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
landmark <- landmark[,,-(1:4)]
lamdmark2 <- landmark2[,,-(1:4)]
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
areolet = as.factor( substr( dimnames(landmark)[[3]], 15, 15))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
foto = as.factor( substr( dimnames(landmark)[[3]], 24,24))
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL, curves = sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD2<-gpagen(landmark2, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
par(mfrow= c(1,2))
PCA <-plotTangentSpace(proD$coords, groups=foto, legend=T)
legend("topright", legend= levels(foto), col=palette(), pch=rep(19,14) )
title(main = "Foto vs Illustrations - With curves")
PCA1 <-plotTangentSpace(proD2$coords, groups=foto, legend=T)
legend("topright", legend= levels(foto), col=palette(), pch=rep(19,14) )
title(main = "Foto vs Illustrations - Without Curves")
## the more beautiful version:
mat <- matrix(c(4,5,0,1,1,2,1,1,3), 3)
layout(mat, widths=c(1,1,1), heights=c(1,1,1))# set the size of the rows and columns
par(mar=c(4, 4, 1, 1)) # sets the margins
plot(PCA$pc.scores[,2],PCA$pc.scores[,3], col=foto, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(foto), col=palette(), pch=rep(19,14) )
segments(min(PCA$pc.scores[,2]), 0,  max(PCA$pc.scores[,2]),0, col="grey", lty="dashed")
segments(0, min(PCA$pc.scores[,3]), 0,  max(PCA$pc.scores[,3]), col="grey", lty="dashed")
# in order to name individuals: text(PCA$pc.scores[,1],PCA$pc.scores[,2], species)
ref <- mshape(proD$coords)
#qw= c(1,4,2,6,5,7,3)
par(mar = c(0,0,0,0)) # sets the margins
plotRefToTarget(ref,PCA$pc.shapes$PC1min)
# Item 3
plotRefToTarget(ref,PCA$pc.shapes$PC1max)
# Item 4
plotRefToTarget(ref,PCA$pc.shapes$PC2max)
# Item 5
plotRefToTarget(ref,PCA$pc.shapes$PC2min)
colors = c("red","cyan")[subfam]
plot3d(PCA1$pc.scores[,1:3], col = colors, size = 9)
text3d(PCA1$pc.scores[,1:3],texts=species,pos=4,cex= 0.6)
legend3d("topright", legend = c("Gelinae","Ichneumoninae"), col = c("red","cyan") , pch= 16)
#setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark3 = readland.tps("DATA_GEL_ICH.TPS",specID = "ID", readcurves = F, warnmsg = TRUE)
landmark4 = readland.tps("DATA_ALT_FOTO.tps",specID = "ID", readcurves = F, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species1 = as.factor( substr( dimnames(landmark3)[[3]], 1, 6))
subfam1 = as.factor( substr( dimnames(landmark3)[[3]], 8, 13))
tribe1 = as.factor( substr( dimnames(landmark3)[[3]], 17, 19))
foto1 = as.factor( substr( dimnames(landmark3)[[3]], 24,24))
species2 = as.factor( substr( dimnames(landmark4)[[3]], 1, 6))
tribe2 = as.factor( substr( dimnames(landmark4)[[3]], 17, 19))
foto2 = as.factor( substr( dimnames(landmark4)[[3]], 24,24))
subfam2 = as.factor( substr( dimnames(landmark4)[[3]], 8, 13))
levels(subfam2) <- c(levels(subfam2), "f")
subfam2[112:125] <- "f"
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark3, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD2<-gpagen(landmark4, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
PCA <-plotTangentSpace(proD$coords, groups=subfam1, legend=T)
PCA1 <-plotTangentSpace(proD2$coords, groups=subfam2, legend=T)
par(mfrow=c(1,2)) # sets the margins
plot(PCA$pc.scores[,2],PCA$pc.scores[,3], col=subfam1, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam1), col=palette(), pch=rep(19,14) )
plot(PCA1$pc.scores[,2],PCA1$pc.scores[,3], col=subfam2, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam2), col=palette(), pch=rep(19,14) )
#setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark3 = readland.tps("DATA_GEL_ICH.TPS",specID = "ID", readcurves = F, warnmsg = TRUE)
landmark4 = readland.tps("DATA_ALT_FOTO.tps",specID = "ID", readcurves = F, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species1 = as.factor( substr( dimnames(landmark3)[[3]], 1, 6))
subfam1 = as.factor( substr( dimnames(landmark3)[[3]], 8, 13))
tribe1 = as.factor( substr( dimnames(landmark3)[[3]], 17, 19))
foto1 = as.factor( substr( dimnames(landmark3)[[3]], 24,24))
landmark4 <- landmark4[,,-(112:115)]
species2 = as.factor( substr( dimnames(landmark4)[[3]], 1, 6))
tribe2 = as.factor( substr( dimnames(landmark4)[[3]], 17, 19))
foto2 = as.factor( substr( dimnames(landmark4)[[3]], 24,24))
subfam2 = as.factor( substr( dimnames(landmark4)[[3]], 8, 13))
levels(subfam2) <- c(levels(subfam2), "f")
subfam2[112:125] <- "f"
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark3, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD2<-gpagen(landmark4, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
PCA <-plotTangentSpace(proD$coords, groups=subfam1, legend=T)
PCA1 <-plotTangentSpace(proD2$coords, groups=subfam2, legend=T)
par(mfrow=c(1,2)) # sets the margins
plot(PCA$pc.scores[,2],PCA$pc.scores[,3], col=subfam1, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam1), col=palette(), pch=rep(19,14) )
plot(PCA1$pc.scores[,2],PCA1$pc.scores[,3], col=subfam2, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam2), col=palette(), pch=rep(19,14) )
