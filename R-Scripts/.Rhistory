library(MASS)
data("Cars93")
edit(Cars93)
hist(Cars93)
hist("Cars93")
data("Cars93")
edit(Cars93)
hist(Cars93$Price)
hist(Cars93$Price, xlab = "Preis", ylab = "Häufigkeit", main = "Preise von 93 Modellen des Jahres 1993")
hist(Cars93$Price, xlab = "Preis", ylab = "Häufigkeit", main = "Preise von 93 Modellen des Jahres 1993", xlim = c(0,70))
hist(Cars93$Price, xlab = "Preis", ylab = "Häufigkeit", main = "Preise von 93 Modellen des Jahres 1993",
xlim = c(0,70), probability = TRUE)
hist(Cars93$Price, xlab = "Preis", ylab = "Häufigkeit", main = "Preise von 93 Modellen des Jahres 1993",
xlim = c(0,70), probability = TRUE, lines(density(Cars93$Price)))
table(Cars93$Type)
barplot(table(Cars93$Type))
barplot(table(Cars93$Type), ylim = c(0,25))
barplot(table(Cars93$Type), ylim = c(0,25), xlab = "Typ", ylab = "häufigkeit")
barplot(table(Cars93$Type), ylim = c(0,25), xlab = "Typ", ylab = "häufigkeit",axis.lty = "solid")
barplot(table(Cars93$Type), ylim = c(0,25), xlab = "Typ", ylab = "häufigkeit",axis.lty = "solid", space = .15)
type.frame<- data.frame(table(Cars93$Type))
type.frame
dotchart(type.frame$Freq, type.frame$Var1)
plot(Cars93$Horsepower, Cars93$MPG.city, xlab = "PS", ylab = "Verbrauch Stadtverkehr")
plot(Cars93$Horsepower, Cars93$MPG.city, xlab = "PS", ylab = "Verbrauch Stadtverkehr", pch=16)
cars.subset<- subset(Cars93, select = c(MPG.city, Price, Horsepower))
colnames(cars.subset)<- c("Verbrauch", "Preis", "PS")
head(cars.subset)
pairs(cars.subset)
with(Cars93, mean(Horsepower[Origin=="USA"]))
install.packages("ggplot2")
library(asuR)
data("budworm")
budworm
glm2<- glm(cbind(num.dead, num.alive)~log2(dose), data = budworm[budworm$sex=="male",], family = "binomial")
summary(glm2)
plot(glm2)
library(HSAUR)
data("agefat")
agefat
plot(fat~age, data=agefat)
plot(fat~age,abline() data=agefat)
data("agefat")
agefat
m<-lm(fat~age+sex, data = agefat)
m<-lm(fat~age+sex, data = agefat)
par(mfrow= c(2,2))
plot(m)
m1<- lm((fat)**2~age+sex, data = agefat)
m1<- lm((fat)**2~age+sex, data = agefat)
par(mfrow= c(2,2))
plot(m1)
m2<- lm(fat~(age)**2+sex, data = agefat)
m2<- lm(fat~(age)**2+sex, data = agefat)
par(mfrow=c(2,2))
plot(m2)
summary(m)
summary(m1)
summary(m2)
hist(agefat$fat)
hist(agefat$fat, col=coral)
hist(agefat$fat, col=corall)
hist(agefat$fat, col="coral"")
hist(agefat$fat, col="coral)
hist(agefat$fat, col="coral")
hist(agefat$fat, col="aquamarin")
hist(agefat$fat, col="aquamarine")
hist(agefat$fat, col="firebrick")
data("agefat")
agefat
ma<- agefat[agefat$sex=="male",]
ma
install.packages(devtools)
install.packages("devtools")
require(devtools)
install_version("geomorph", "3.0.5", repos= "https://cran.us.r-project.org")
install.packages("fastmatch")
install_version("geomorph", "3.0.5", repos= "https://cran.us.r-project.org")
install.packages("igraph")
install_version("geomorph", "3.0.5", repos= "https://cran.us.r-project.org")
install.packages("quadprog")
install_version("geomorph", "3.0.5", repos= "https://cran.us.r-project.org")
install.packages("tmvnsim")
install_version("geomorph", "3.0.5", repos= "https://cran.us.r-project.org")
install.packages("mnormt")
install_version("geomorph", "3.0.5", repos= "https://cran.us.r-project.org")
install.packages("gtools")
install_version("geomorph", "3.0.5", repos= "https://cran.us.r-project.org")
install.packages("expm")
install_version("geomorph", "3.0.5", repos= "https://cran.us.r-project.org")
install.packages("maps")
install_version("geomorph", "3.0.5", repos= "https://cran.us.r-project.org")
install.packages("ape")
install_version("geomorph", "3.0.5", repos= "https://cran.us.r-project.org")
install.packages("phangorn")
install_version("geomorph", "3.0.5", repos= "https://cran.us.r-project.org")
install.packages("sass")
install_version("geomorph", "3.0.5", repos= "https://cran.us.r-project.org")
install.packages("sourcetools")
install_version("geomorph", "3.0.5", repos= "https://cran.us.r-project.org")
install.packages("httpuv")
install_version("geomorph", "3.0.5", repos= "https://cran.us.r-project.org")
install.packages("colorspace")
install_version("geomorph", "3.0.5", repos= "https://cran.us.r-project.org")
install.packages("deSolve")
install_version("geomorph", "3.0.5", repos= "https://cran.us.r-project.org")
install.packages(c("readxl", "xlsx"))
install.packages("subplex")
install_version("geomorph", "3.0.5", repos= "https://cran.us.r-project.org")
install.packages("mvtnorm")
install_version("geomorph", "3.0.5", repos= "https://cran.us.r-project.org")
install.packages("geiger")
install_version("geomorph", "3.0.5", repos= "https://cran.us.r-project.org")
install.packages("jpeg")
install_version("geomorph", "3.0.5", repos= "https://cran.us.r-project.org")
install.packages("rgl")
install_version("geomorph", "3.0.5", repos= "https://cran.us.r-project.org")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
require(rgl)
options(rgl.useNULL = TRUE) # Suppress the separate window.
knitr::knit_hooks$set(webgl = hook_webgl)
library(geomorph)
setwd("~/GitHub/Ichneumonidae/R-Scripts")
setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark = readland.tps("DATA_GELINAE.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
areolet = as.factor( substr( dimnames(landmark)[[3]], 15, 15))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL, curves= sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
PCA <-plotTangentSpace(proD$coords, groups=tribe, legend=T)
PCA$pc.summary
dev.off()
#one can look at different PCA combinations to find the best model for its purpose
plot(PCA$pc.scores[,1],PCA$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
# use the text() function to get the names of individual points
text(PCA$pc.scores[,1],PCA$pc.scores[,2],labels=species,cex=0.7,pos=4)
dev.off()
## the more beautiful version:
mat <- matrix(c(4,5,0,1,1,2,1,1,3), 3)
layout(mat, widths=c(1,1,1), heights=c(1,1,1))# set the size of the rows and columns
par(mar=c(4, 4, 1, 1)) # sets the margins
plot(PCA$pc.scores[,1],PCA$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
segments(min(PCA$pc.scores[,1]), 0,  max(PCA$pc.scores[,1]),0, col="grey", lty="dashed")
segments(0, min(PCA$pc.scores[,2]), 0,  max(PCA$pc.scores[,2]), col="grey", lty="dashed")
# in order to name individuals: text(PCA$pc.scores[,1],PCA$pc.scores[,2], species)
ref <- mshape(proD$coords)
#qw= c(1,4,2,6,5,7,3)
par(mar = c(0,0,0,0)) # sets the margins
plotRefToTarget(ref,PCA$pc.shapes$PC1min)
# Item 3
plotRefToTarget(ref,PCA$pc.shapes$PC1max)
# Item 4
plotRefToTarget(ref,PCA$pc.shapes$PC2max)
# Item 5
plotRefToTarget(ref,PCA$pc.shapes$PC2min)
install.packages("dendextend")
require("geomorph")
setwd("~/GitHub/Ichneumonidae/R-Scripts")
##       read tps file
landmark = readland.tps("towns_1_3_4_Fossils_I_Q.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
