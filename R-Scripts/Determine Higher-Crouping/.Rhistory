setwd("~/GitHub/Ichneumonidae/R-Scripts/Determine Higher-Crouping")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
require(rgl)
options(rgl.useNULL = TRUE) # Suppress the separate window.
knitr::knit_hooks$set(webgl = hook_webgl)
library(geomorph)
setwd("~/GitHub/Ichneumonidae/R-Scripts/Determine Higher-Crouping")
landmark = readland.tps("DATA_SUBFAMILY.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
areolet = as.factor( substr( dimnames(landmark)[[3]], 15, 15))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL, curves= sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
require(rgl)
options(rgl.useNULL = TRUE) # Suppress the separate window.
knitr::knit_hooks$set(webgl = hook_webgl)
library(geomorph)
setwd("~/GitHub/Ichneumonidae/R-Scripts/Determine Higher-Crouping")
landmark = readland.tps("DATA_SUBFAMILY.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
areolet = as.factor( substr( dimnames(landmark)[[3]], 15, 15))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL, curves= sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
PCA <-plotTangentSpace(proD$coords, groups=tribe, legend=T)
#one can look at different PCA combinations to find the best model for its purpose
plot(PCA$pc.scores[,1],PCA$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
# use the text() function to get the names of individual points
text(PCA$pc.scores[,1],PCA$pc.scores[,2],labels=species,cex=0.7,pos=4)
## the more beautiful version:
mat <- matrix(c(4,5,0,1,1,2,1,1,3), 3)
layout(mat, widths=c(1,1,1), heights=c(1,1,1))# set the size of the rows and columns
par(mar=c(4, 4, 1, 1)) # sets the margins
plot(PCA$pc.scores[,1],PCA$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
segments(min(PCA$pc.scores[,1]), 0,  max(PCA$pc.scores[,1]),0, col="grey", lty="dashed")
segments(0, min(PCA$pc.scores[,2]), 0,  max(PCA$pc.scores[,2]), col="grey", lty="dashed")
# in order to name individuals: text(PCA$pc.scores[,1],PCA$pc.scores[,2], species)
ref <- mshape(proD$coords)
#qw= c(1,4,2,6,5,7,3)
par(mar = c(0,0,0,0)) # sets the margins
plotRefToTarget(ref,PCA$pc.shapes$PC1min)
# Item 3
plotRefToTarget(ref,PCA$pc.shapes$PC1max)
# Item 4
plotRefToTarget(ref,PCA$pc.shapes$PC2max)
# Item 5
plotRefToTarget(ref,PCA$pc.shapes$PC2min)
colors = c("red","cyan","magenta","yellow")[tribe]
plot3d(PCA$pc.scores[,1:3], col = colors, size = 9)
text3d(PCA$pc.scores[,1:3],texts=species,pos=4,cex= 0.6)
legend3d("topright", legend = c("Echthrini","Fossil", "Gelini", "Mesostenini"), col = c("red","cyan","magenta","yellow") , pch= 16)
data = data.frame(species, tribe, PCA$pc.scores[,1:6])
# Compute distances and hierarchical clustering
dd <- dist(scale(data[c(3:8)]), method = "euclidean")
## Ward's minimum variance method
hc <- hclust(dd, method = "ward.D2")
hc$labels = tribe
# Convert hclust into a dendrogram and plot
hcd <- as.dendrogram(hc)
require("dendextend") ## needs a dendrogram
#plot(hcd)
# Create a vector of colors, darkgreen if am is 0, green if 1.
my_colors <- ifelse(hc$labels=="ech", "cyan",ifelse(hc$labels=="gel","green", ifelse(hc$labels=="mes", "red","yellow")))
#my_colors <- ifelse(hc$labels=="scolob", "forestgreen",ifelse(hc$labels=="metopi", "green","yellow"))
par(mar=c(10,1,1,1))
hcd %>%
set("labels_col", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"), k=13) %>%
set("branches_k_color", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"),k = 13) %>%
set("labels_cex", 0.8)  %>%
set("leaves_pch", 19)  %>%
set("nodes_cex", 0.4) %>%
plot(axes=FALSE)
# Add the colored bar
colored_bars(colors = my_colors, dend = hcd, rowLabels = "tribe")
legend("topright", legend=levels(tribe), col= c("cyan", "yellow", "green", "red"), pch=15)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
require(rgl)
options(rgl.useNULL = TRUE) # Suppress the separate window.
knitr::knit_hooks$set(webgl = hook_webgl)
library(geomorph)
setwd("~/GitHub/Ichneumonidae/R-Scripts/Determine Higher-Crouping")
landmark = readland.tps("DATA_SUBFAMILY.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
areolet = as.factor( substr( dimnames(landmark)[[3]], 15, 15))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL, curves= sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
PCA <-plotTangentSpace(proD$coords, groups=subfamily, legend=T)
PCA <-plotTangentSpace(proD$coords, groups=subfam, legend=T)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
require(rgl)
options(rgl.useNULL = TRUE) # Suppress the separate window.
knitr::knit_hooks$set(webgl = hook_webgl)
library(geomorph)
setwd("~/GitHub/Ichneumonidae/R-Scripts/Determine Higher-Crouping")
landmark = readland.tps("DATA_SUBFAMILY.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
areolet = as.factor( substr( dimnames(landmark)[[3]], 15, 15))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL, curves= sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
PCA <-plotTangentSpace(proD$coords, groups=subfam, legend=T)
#one can look at different PCA combinations to find the best model for its purpose
plot(PCA$pc.scores[,1],PCA$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
# use the text() function to get the names of individual points
text(PCA$pc.scores[,1],PCA$pc.scores[,2],labels=species,cex=0.7,pos=4)
## the more beautiful version:
mat <- matrix(c(4,5,0,1,1,2,1,1,3), 3)
layout(mat, widths=c(1,1,1), heights=c(1,1,1))# set the size of the rows and columns
par(mar=c(4, 4, 1, 1)) # sets the margins
plot(PCA$pc.scores[,1],PCA$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
segments(min(PCA$pc.scores[,1]), 0,  max(PCA$pc.scores[,1]),0, col="grey", lty="dashed")
segments(0, min(PCA$pc.scores[,2]), 0,  max(PCA$pc.scores[,2]), col="grey", lty="dashed")
# in order to name individuals: text(PCA$pc.scores[,1],PCA$pc.scores[,2], species)
ref <- mshape(proD$coords)
#qw= c(1,4,2,6,5,7,3)
par(mar = c(0,0,0,0)) # sets the margins
plotRefToTarget(ref,PCA$pc.shapes$PC1min)
# Item 3
plotRefToTarget(ref,PCA$pc.shapes$PC1max)
# Item 4
plotRefToTarget(ref,PCA$pc.shapes$PC2max)
# Item 5
plotRefToTarget(ref,PCA$pc.shapes$PC2min)
colors = c("red","cyan","magenta","yellow")[tribe]
plot3d(PCA$pc.scores[,1:3], col = colors, size = 9)
text3d(PCA$pc.scores[,1:3],texts=species,pos=4,cex= 0.6)
legend3d("topright", legend = c("Echthrini","Fossil", "Gelini", "Mesostenini"), col = c("red","cyan","magenta","yellow") , pch= 16)
data = data.frame(species, tribe, PCA$pc.scores[,1:6])
# Compute distances and hierarchical clustering
dd <- dist(scale(data[c(3:8)]), method = "euclidean")
## Ward's minimum variance method
hc <- hclust(dd, method = "ward.D2")
hc$labels = tribe
# Convert hclust into a dendrogram and plot
hcd <- as.dendrogram(hc)
require("dendextend") ## needs a dendrogram
#plot(hcd)
# Create a vector of colors, darkgreen if am is 0, green if 1.
my_colors <- ifelse(hc$labels=="ech", "cyan",ifelse(hc$labels=="gel","green", ifelse(hc$labels=="mes", "red","yellow")))
#my_colors <- ifelse(hc$labels=="scolob", "forestgreen",ifelse(hc$labels=="metopi", "green","yellow"))
par(mar=c(10,1,1,1))
hcd %>%
set("labels_col", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"), k=13) %>%
set("branches_k_color", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"),k = 13) %>%
set("labels_cex", 0.8)  %>%
set("leaves_pch", 19)  %>%
set("nodes_cex", 0.4) %>%
plot(axes=FALSE)
# Add the colored bar
colored_bars(colors = my_colors, dend = hcd, rowLabels = "tribe")
legend("topright", legend=levels(tribe), col= c("cyan", "yellow", "green", "red"), pch=15)
setwd("~/GitHub/Ichneumonidae/R-Scripts/Determine Higher-Crouping")
setwd("~/GitHub/Ichneumonidae/R-Scripts/Determine Higher-Crouping")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
require(rgl)
options(rgl.useNULL = TRUE) # Suppress the separate window.
knitr::knit_hooks$set(webgl = hook_webgl)
library(geomorph)
setwd("~/GitHub/Ichneumonidae/R-Scripts/Determine Higher-Crouping")
## Preparing Data
landmark = readland.tps("blockcourse_highersub.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
landmark
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
subfam
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL, curves= sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
use= c("pimpli", "banchi", "gelina", "ophion", "ichneu")
reduced<- proD$coords[,,subfam%in% use]
pro_red<-gpagen(landmark, surfaces = NULL, curves= sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
PCA <-plotTangentSpace(pro_red$coords, groups=subfam, legend=T)
#one can look at different PCA combinations to find the best model for its purpose
plot(PCA$pc.scores[,1],PCA$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
#one can look at different PCA combinations to find the best model for its purpose
plot(PCA$pc.scores[,1],PCA$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
PCA <-plotTangentSpace(pro_red$coords, groups=subfam, legend=T)
dimnames(pro_red$coords[[3]])
pro_red<-gpagen(reduced, surfaces = NULL, curves= sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
dimnames(pro_red$coords[[3]])
reduced
pro_red$coords
dimnames
landmark = readland.tps("blockcourse_highersub.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
landmark = readland.tps("blockcourse_highersub.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
areolet = as.factor( substr( dimnames(landmark)[[3]], 15, 15))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL, curves= sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
use= c("pimpli", "banchi", "gelina", "ophion", "ichneu")
reduced<- proD$coords[,,subfam%in% use]
pro_red<-gpagen(reduced, surfaces = NULL, curves= sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
subfam1<-as.factor(substr(dimnames(pro_red$coords[[3]])))
dimnames
dimnames(pro_red$coords[[3]])
landmark = readland.tps("blockcourse_highersub.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
areolet = as.factor( substr( dimnames(landmark)[[3]], 15, 15))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL, curves= sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
use= c("pimpli", "banchi", "gelina", "ophion", "ichneu")
reduced<- proD$coords[,,subfam%in% use]
pro_red<-gpagen(reduced, surfaces = NULL, curves= sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
subfam1<-as.factor(substr(dimnames(pro_red$coords[[3]])))
dimnames(pro_red$coords[[3]])
subfam1<-as.factor(substr(dimnames(pro_red$coords)[[3]],8,13))
subfam1<-as.factor(substr(dimnames(pro_red$coords)[[3]],8,13))
PCA <-plotTangentSpace(pro_red$coords, groups=subfam1, legend=T)
landmark = readland.tps("blockcourse_highersub.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
setwd("~/GitHub/Ichneumonidae/R-Scripts/Determine Higher-Crouping")
landmark = readland.tps("blockcourse_highersub.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
landmark[2:29,,]
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark[2:29,,], surfaces = NULL, curves= sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders_red = define.sliders(c(14,21:28,15))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark[2:29,,], surfaces = NULL, curves= sliders_red,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
use= c("pimpli", "banchi", "gelina", "ophion", "ichneu")
reduced<- proD$coords[,,subfam%in% use]
pro_red<-gpagen(reduced, surfaces = NULL, curves= sliders_red,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
subfam1<-as.factor(substr(dimnames(pro_red$coords)[[3]],8,13))
PCA <-plotTangentSpace(pro_red$coords, groups=subfam1, legend=T)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
require(rgl)
options(rgl.useNULL = TRUE) # Suppress the separate window.
knitr::knit_hooks$set(webgl = hook_webgl)
library(geomorph)
setwd("~/GitHub/Ichneumonidae/R-Scripts/Determine Higher-Crouping")
landmark = readland.tps("blockcourse_highersub.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
areolet = as.factor( substr( dimnames(landmark)[[3]], 15, 15))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL, curves= sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
use= c("pimpli", "banchi", "gelina", "ophion", "ichneu")
reduced<- proD$coords[,,subfam%in% use]
pro_red<-gpagen(reduced, surfaces = NULL, curves= sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
subfam1<-as.factor(substr(dimnames(pro_red$coords)[[3]],8,13))
PCA <-plotTangentSpace(pro_red$coords, groups=subfam1, legend=T)
#one can look at different PCA combinations to find the best model for its purpose
plot(PCA$pc.scores[,1],PCA$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
# use the text() function to get the names of individual points
text(PCA$pc.scores[,1],PCA$pc.scores[,2],labels=species,cex=0.7,pos=4)
## the more beautiful version:
mat <- matrix(c(4,5,0,1,1,2,1,1,3), 3)
layout(mat, widths=c(1,1,1), heights=c(1,1,1))# set the size of the rows and columns
par(mar=c(4, 4, 1, 1)) # sets the margins
plot(PCA$pc.scores[,1],PCA$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
segments(min(PCA$pc.scores[,1]), 0,  max(PCA$pc.scores[,1]),0, col="grey", lty="dashed")
segments(0, min(PCA$pc.scores[,2]), 0,  max(PCA$pc.scores[,2]), col="grey", lty="dashed")
# in order to name individuals: text(PCA$pc.scores[,1],PCA$pc.scores[,2], species)
ref <- mshape(proD$coords)
#qw= c(1,4,2,6,5,7,3)
par(mar = c(0,0,0,0)) # sets the margins
plotRefToTarget(ref,PCA$pc.shapes$PC1min)
# Item 3
plotRefToTarget(ref,PCA$pc.shapes$PC1max)
# Item 4
plotRefToTarget(ref,PCA$pc.shapes$PC2max)
# Item 5
plotRefToTarget(ref,PCA$pc.shapes$PC2min)
colors = c("red","cyan","magenta","yellow")[tribe]
plot3d(PCA$pc.scores[,1:3], col = colors, size = 9)
text3d(PCA$pc.scores[,1:3],texts=species,pos=4,cex= 0.6)
legend3d("topright", legend = c("Echthrini","Fossil", "Gelini", "Mesostenini"), col = c("red","cyan","magenta","yellow") , pch= 16)
data = data.frame(species, tribe, PCA$pc.scores[,1:6])
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
require(rgl)
options(rgl.useNULL = TRUE) # Suppress the separate window.
knitr::knit_hooks$set(webgl = hook_webgl)
library(geomorph)
setwd("~/GitHub/Ichneumonidae/R-Scripts/Determine Higher-Crouping")
landmark = readland.tps("blockcourse_highersub.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
areolet = as.factor( substr( dimnames(landmark)[[3]], 15, 15))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders_red = define.sliders(c(14,21:28,15))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark[2:29,,], surfaces = NULL, curves= sliders_red,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
use= c("pimpli", "banchi", "gelina", "ophion", "ichneu")
reduced<- proD$coords[,,subfam%in% use]
pro_red<-gpagen(reduced, surfaces = NULL, curves= sliders_red,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
subfam1<-as.factor(substr(dimnames(pro_red$coords)[[3]],8,13))
PCA <-plotTangentSpace(pro_red$coords, groups=subfam1, legend=T)
#one can look at different PCA combinations to find the best model for its purpose
plot(PCA$pc.scores[,1],PCA$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
# use the text() function to get the names of individual points
text(PCA$pc.scores[,1],PCA$pc.scores[,2],labels=species,cex=0.7,pos=4)
## the more beautiful version:
mat <- matrix(c(4,5,0,1,1,2,1,1,3), 3)
layout(mat, widths=c(1,1,1), heights=c(1,1,1))# set the size of the rows and columns
par(mar=c(4, 4, 1, 1)) # sets the margins
plot(PCA$pc.scores[,1],PCA$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
segments(min(PCA$pc.scores[,1]), 0,  max(PCA$pc.scores[,1]),0, col="grey", lty="dashed")
segments(0, min(PCA$pc.scores[,2]), 0,  max(PCA$pc.scores[,2]), col="grey", lty="dashed")
# in order to name individuals: text(PCA$pc.scores[,1],PCA$pc.scores[,2], species)
ref <- mshape(proD$coords)
#qw= c(1,4,2,6,5,7,3)
par(mar = c(0,0,0,0)) # sets the margins
plotRefToTarget(ref,PCA$pc.shapes$PC1min)
# Item 3
plotRefToTarget(ref,PCA$pc.shapes$PC1max)
# Item 4
plotRefToTarget(ref,PCA$pc.shapes$PC2max)
# Item 5
plotRefToTarget(ref,PCA$pc.shapes$PC2min)
colors = c("red","cyan","magenta","yellow")[tribe]
plot3d(PCA$pc.scores[,1:3], col = colors, size = 9)
text3d(PCA$pc.scores[,1:3],texts=species,pos=4,cex= 0.6)
legend3d("topright", legend = c("Echthrini","Fossil", "Gelini", "Mesostenini"), col = c("red","cyan","magenta","yellow") , pch= 16)
data = data.frame(species, tribe, PCA$pc.scores[,1:6])
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders_red = define.sliders(c(14,21:28,15))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark[2:29,,], surfaces = NULL, curves= sliders_red,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
use= c("pimpli", "banchi", "gelina", "ophion", "ichneu")
reduced<- proD$coords[,,subfam%in% use]
pro_red<-gpagen(reduced, surfaces = NULL, curves= sliders_red,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
subfam1<-as.factor(substr(dimnames(pro_red$coords)[[3]],8,13))
PCA <-plotTangentSpace(pro_red$coords, groups=subfam1, legend=T)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL, curves= sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
use= c("pimpli", "banchi", "gelina", "ophion", "ichneu")
reduced<- proD$coords[,,subfam%in% use]
pro_red<-gpagen(reduced, surfaces = NULL, curves= sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
subfam1<-as.factor(substr(dimnames(pro_red$coords)[[3]],8,13))
PCA <-plotTangentSpace(pro_red$coords, groups=subfam1, legend=T)
landmark = readland.tps("blockcourse_highersub.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders_red = define.sliders(c(14,21:28,15))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark[2:29,,], surfaces = NULL, curves= sliders_red,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
use= c("pimpli", "banchi", "gelina", "ophion", "ichneu")
reduced<- proD$coords[,,subfam%in% use]
pro_red<-gpagen(reduced, surfaces = NULL, curves= sliders_red,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
subfam1<-as.factor(substr(dimnames(pro_red$coords)[[3]],8,13))
PCA <-plotTangentSpace(pro_red$coords, groups=subfam1, legend=T)
#one can look at different PCA combinations to find the best model for its purpose
plot(PCA$pc.scores[,1],PCA$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
# use the text() function to get the names of individual points
text(PCA$pc.scores[,1],PCA$pc.scores[,2],labels=species,cex=0.7,pos=4)
#one can look at different PCA combinations to find the best model for its purpose
plot(PCA$pc.scores[,1],PCA$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
PCA <-plotTangentSpace(pro_red$coords, groups=subfam1, legend=T)
