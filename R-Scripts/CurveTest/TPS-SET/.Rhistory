setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark = readland.tps("DATA_GELINAE.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
areolet = as.factor( substr( dimnames(landmark)[[3]], 15, 15))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL, curves= sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
PCA <-plotTangentSpace(proD$coords, groups=tribe, legend=T)
PCA$pc.summary
dev.off()
#one can look at different PCA combinations to find the best model for its purpose
plot(PCA$pc.scores[,1],PCA$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
# use the text() function to get the names of individual points
text(PCA$pc.scores[,1],PCA$pc.scores[,2],labels=species,cex=0.7,pos=4)
dev.off()
## the more beautiful version:
mat <- matrix(c(4,5,0,1,1,2,1,1,3), 3)
layout(mat, widths=c(1,1,1), heights=c(1,1,1))# set the size of the rows and columns
par(mar=c(4, 4, 1, 1)) # sets the margins
plot(PCA$pc.scores[,1],PCA$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
segments(min(PCA$pc.scores[,1]), 0,  max(PCA$pc.scores[,1]),0, col="grey", lty="dashed")
segments(0, min(PCA$pc.scores[,2]), 0,  max(PCA$pc.scores[,2]), col="grey", lty="dashed")
# in order to name individuals: text(PCA$pc.scores[,1],PCA$pc.scores[,2], species)
ref <- mshape(proD$coords)
#qw= c(1,4,2,6,5,7,3)
par(mar = c(0,0,0,0)) # sets the margins
plotRefToTarget(ref,PCA$pc.shapes$PC1min)
# Item 3
plotRefToTarget(ref,PCA$pc.shapes$PC1max)
# Item 4
plotRefToTarget(ref,PCA$pc.shapes$PC2max)
# Item 5
plotRefToTarget(ref,PCA$pc.shapes$PC2min)
colors = c("red","cyan","magenta","yellow")[tribe]
plot3d(PCA$pc.scores[,1:3], col = colors, size = 9)
text3d(PCA$pc.scores[,1:3],texts=species,pos=4,cex= 0.6)
legend3d("topright", legend = c("Echthrini","Fossil", "Gelini", "Mesostenini"), col = c("red","cyan","magenta","yellow") , pch= 16)
PCA$pc.summary
data = data.frame(species, tribe, PCA$pc.scores[,1:12])
# Compute distances and hierarchical clustering
dd <- dist(scale(data[c(3:14)]), method = "euclidean")
## Ward's minimum variance method
hc <- hclust(dd, method = "ward.D2")
hc$labels = tribe + " - " + species
# Convert hclust into a dendrogram and plot
hcd <- as.dendrogram(hc)
require("dendextend") ## needs a dendrogram
plot(hcd)
# Create a vector of colors, darkgreen if am is 0, green if 1.
#my_colors <- ifelse(hc$labels=="scolob", "forestgreen",ifelse(hc$labels=="TryMet","red", ifelse(hc$labels=="metopi", "green","yellow")))
#my_colors <- ifelse(hc$labels=="scolob", "forestgreen",ifelse(hc$labels=="metopi", "green","yellow"))
par(mar=c(10,1,1,1))
hcd %>%
set("labels_col", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"), k=13) %>%
set("branches_k_color", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"),k = 13) %>%
set("labels_cex", 0.7)  %>%
set("leaves_pch", 19)  %>%
set("nodes_cex", 0.4) %>%
plot(axes=FALSE)
# Add the colored bar
colored_bars(colors = my_colors, dend = hcd, rowLabels = "subfamily")
PCA$pc.summary
data = data.frame(species, tribe, PCA$pc.scores[,1:12])
# Compute distances and hierarchical clustering
dd <- dist(scale(data[c(3:14)]), method = "euclidean")
## Ward's minimum variance method
hc <- hclust(dd, method = "ward.D2")
hc$labels = tribe + " - " + species
# Convert hclust into a dendrogram and plot
hcd <- as.dendrogram(hc)
hc$labels = paste(c(tribe,species), seq= " - ")
PCA$pc.summary
data = data.frame(species, tribe, PCA$pc.scores[,1:12])
# Compute distances and hierarchical clustering
dd <- dist(scale(data[c(3:14)]), method = "euclidean")
## Ward's minimum variance method
hc <- hclust(dd, method = "ward.D2")
hc$labels = paste(c(tribe,species), seq= " - ")
# Convert hclust into a dendrogram and plot
hcd <- as.dendrogram(hc)
PCA$pc.summary
data = data.frame(species, tribe, PCA$pc.scores[,1:12])
# Compute distances and hierarchical clustering
dd <- dist(scale(data[c(3:14)]), method = "euclidean")
## Ward's minimum variance method
hc <- hclust(dd, method = "ward.D2")
hc$labels = paste(c(tribe,species), seq= " - ")
# Convert hclust into a dendrogram and plot
hcd <- as.dendrogram(hc)
PCA$pc.summary
data = data.frame(species, tribe, PCA$pc.scores[,1:12])
# Compute distances and hierarchical clustering
dd <- dist(scale(data[c(3:14)]), method = "euclidean")
## Ward's minimum variance method
hc <- hclust(dd, method = "ward.D2")
hc$labels = tribe
# Convert hclust into a dendrogram and plot
hcd <- as.dendrogram(hc)
require("dendextend") ## needs a dendrogram
plot(hcd)
# Create a vector of colors, darkgreen if am is 0, green if 1.
my_colors <- ifelse(hc$labels=="ech", "forestgreen",ifelse(hc$labels=="gel","red", ifelse(hc$labels=="mes", "green","yellow")))
#my_colors <- ifelse(hc$labels=="scolob", "forestgreen",ifelse(hc$labels=="metopi", "green","yellow"))
par(mar=c(10,1,1,1))
hcd %>%
set("labels_col", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"), k=13) %>%
set("branches_k_color", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"),k = 13) %>%
set("labels_cex", 0.7)  %>%
set("leaves_pch", 19)  %>%
set("nodes_cex", 0.4) %>%
plot(axes=FALSE)
# Add the colored bar
colored_bars(colors = my_colors, dend = hcd, rowLabels = "subfamily")
PCA$pc.summary
data = data.frame(species, tribe, PCA$pc.scores[,1:12])
# Compute distances and hierarchical clustering
dd <- dist(scale(data[c(3:14)]), method = "euclidean")
## Ward's minimum variance method
hc <- hclust(dd, method = "ward.D2")
hc$labels = species
# Convert hclust into a dendrogram and plot
hcd <- as.dendrogram(hc)
colorspec <- data.frame(species,tribe)
hc$labels = colorspec
require("dendextend") ## needs a dendrogram
#plot(hcd)
# Create a vector of colors, darkgreen if am is 0, green if 1.
my_colors <- ifelse(hc$labels[,"tribe"]=="ech", "forestgreen",ifelse(hc$labels[,"tribe"]=="gel","red", ifelse(hc$labels[,"tribe"]=="mes", "green","yellow")))
#my_colors <- ifelse(hc$labels=="scolob", "forestgreen",ifelse(hc$labels=="metopi", "green","yellow"))
par(mar=c(10,1,1,1))
hcd %>%
set("labels_col", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"), k=13) %>%
set("branches_k_color", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"),k = 13) %>%
set("labels_cex", 0.7)  %>%
set("leaves_pch", 19)  %>%
set("nodes_cex", 0.4) %>%
plot(axes=FALSE)
# Add the colored bar
colored_bars(colors = my_colors, dend = hcd, rowLabels = "tribe")
require("dendextend") ## needs a dendrogram
plot(hcd)
# Create a vector of colors, darkgreen if am is 0, green if 1.
#my_colors <- ifelse(hc$labels=="scolob", "forestgreen",ifelse(hc$labels=="TryMet","red", ifelse(hc$labels=="metopi", "green","yellow")))
#my_colors <- ifelse(hc$labels=="scolob", "forestgreen",ifelse(hc$labels=="metopi", "green","yellow"))
par(mar=c(10,1,1,1))
hcd %>%
set("labels_col", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"), k=13) %>%
set("branches_k_color", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"),k = 13) %>%
set("labels_cex", 0.8)  %>%
set("leaves_pch", 19)  %>%
set("nodes_cex", 0.4) %>%
plot(axes=FALSE)
# Add the colored bar
colored_bars(colors = my_colors, dend = hcd, rowLabels = "subfamily")
PCA$pc.summary
data = data.frame(species, tribe, PCA$pc.scores[,1:12])
# Compute distances and hierarchical clustering
dd <- dist(scale(data[c(3:14)]), method = "euclidean")
## Ward's minimum variance method
hc <- hclust(dd, method = "ward.D2")
hc$labels = tribe
# Convert hclust into a dendrogram and plot
hcd <- as.dendrogram(hc)
require("dendextend") ## needs a dendrogram
plot(hcd)
# Create a vector of colors, darkgreen if am is 0, green if 1.
#my_colors <- ifelse(hc$labels=="scolob", "forestgreen",ifelse(hc$labels=="TryMet","red", ifelse(hc$labels=="metopi", "green","yellow")))
#my_colors <- ifelse(hc$labels=="scolob", "forestgreen",ifelse(hc$labels=="metopi", "green","yellow"))
par(mar=c(10,1,1,1))
hcd %>%
set("labels_col", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"), k=13) %>%
set("branches_k_color", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"),k = 13) %>%
set("labels_cex", 0.8)  %>%
set("leaves_pch", 19)  %>%
set("nodes_cex", 0.4) %>%
plot(axes=FALSE)
# Add the colored bar
colored_bars(colors = my_colors, dend = hcd, rowLabels = "subfamily")
legend("topright", legend=levels(tribe), col= my_colors, pch=15)
plot(hcd)
# Create a vector of colors, darkgreen if am is 0, green if 1.
my_colors <- ifelse(hc$labels=="ech", "forestgreen",ifelse(hc$labels=="gel","red", ifelse(hc$labels=="mes", "green","yellow")))
#my_colors <- ifelse(hc$labels=="scolob", "forestgreen",ifelse(hc$labels=="metopi", "green","yellow"))
par(mar=c(10,1,1,1))
hcd %>%
set("labels_col", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"), k=13) %>%
set("branches_k_color", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"),k = 13) %>%
set("labels_cex", 0.8)  %>%
set("leaves_pch", 19)  %>%
set("nodes_cex", 0.4) %>%
plot(axes=FALSE)
# Add the colored bar
colored_bars(colors = my_colors, dend = hcd, rowLabels = "subfamily")
legend("topright", legend=levels(tribe), col= my_colors, pch=15)
legend("topright", legend=levels(tribe), col= levels(my_colors), pch=15)
plot(hcd)
# Create a vector of colors, darkgreen if am is 0, green if 1.
my_colors <- ifelse(hc$labels=="ech", "forestgreen",ifelse(hc$labels=="gel","red", ifelse(hc$labels=="mes", "green","yellow")))
#my_colors <- ifelse(hc$labels=="scolob", "forestgreen",ifelse(hc$labels=="metopi", "green","yellow"))
par(mar=c(10,1,1,1))
hcd %>%
set("labels_col", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"), k=13) %>%
set("branches_k_color", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"),k = 13) %>%
set("labels_cex", 0.8)  %>%
set("leaves_pch", 19)  %>%
set("nodes_cex", 0.4) %>%
plot(axes=FALSE)
# Add the colored bar
colored_bars(colors = my_colors, dend = hcd, rowLabels = "subfamily")
legend("topright", legend=levels(tribe), col= levels(my_colors), pch=15)
legend("topright", legend=levels(tribe), col= levels(as.factor(my_colors)), pch=15)
plot(hcd)
# Create a vector of colors, darkgreen if am is 0, green if 1.
my_colors <- ifelse(hc$labels=="ech", "forestgreen",ifelse(hc$labels=="gel","red", ifelse(hc$labels=="mes", "green","yellow")))
#my_colors <- ifelse(hc$labels=="scolob", "forestgreen",ifelse(hc$labels=="metopi", "green","yellow"))
par(mar=c(10,1,1,1))
hcd %>%
set("labels_col", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"), k=13) %>%
set("branches_k_color", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"),k = 13) %>%
set("labels_cex", 0.8)  %>%
set("leaves_pch", 19)  %>%
set("nodes_cex", 0.4) %>%
plot(axes=FALSE)
# Add the colored bar
colored_bars(colors = my_colors, dend = hcd, rowLabels = "subfamily")
legend("topright", legend=levels(tribe), col= levels(as.factor(my_colors)), pch=15)
PCA$pc.summary
data = data.frame(species, tribe, PCA$pc.scores[,1:8])
# Compute distances and hierarchical clustering
dd <- dist(scale(data[c(3:10)]), method = "euclidean")
## Ward's minimum variance method
hc <- hclust(dd, method = "ward.D2")
hc$labels = tribe
# Convert hclust into a dendrogram and plot
hcd <- as.dendrogram(hc)
require("dendextend") ## needs a dendrogram
#plot(hcd)
# Create a vector of colors, darkgreen if am is 0, green if 1.
my_colors <- ifelse(hc$labels=="ech", "cyan",ifelse(hc$labels=="gel","green", ifelse(hc$labels=="mes", "red","yellow")))
#my_colors <- ifelse(hc$labels=="scolob", "forestgreen",ifelse(hc$labels=="metopi", "green","yellow"))
par(mar=c(10,1,1,1))
hcd %>%
set("labels_col", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"), k=13) %>%
set("branches_k_color", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"),k = 13) %>%
set("labels_cex", 0.8)  %>%
set("leaves_pch", 19)  %>%
set("nodes_cex", 0.4) %>%
plot(axes=FALSE)
# Add the colored bar
colored_bars(colors = my_colors, dend = hcd, rowLabels = "tribe")
legend("topright", legend=levels(tribe), col= c("cyan", "yellow", "green", "red"), pch=15)
PCA$pc.summary
data = data.frame(species, tribe, PCA$pc.scores[,1:6])
# Compute distances and hierarchical clustering
dd <- dist(scale(data[c(3:8)]), method = "euclidean")
## Ward's minimum variance method
hc <- hclust(dd, method = "ward.D2")
hc$labels = tribe
# Convert hclust into a dendrogram and plot
hcd <- as.dendrogram(hc)
require("dendextend") ## needs a dendrogram
#plot(hcd)
# Create a vector of colors, darkgreen if am is 0, green if 1.
my_colors <- ifelse(hc$labels=="ech", "cyan",ifelse(hc$labels=="gel","green", ifelse(hc$labels=="mes", "red","yellow")))
#my_colors <- ifelse(hc$labels=="scolob", "forestgreen",ifelse(hc$labels=="metopi", "green","yellow"))
par(mar=c(10,1,1,1))
hcd %>%
set("labels_col", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"), k=13) %>%
set("branches_k_color", value = c("skyblue", "darkorange", "grey","darkorange4","deepskyblue4",
"darkolivegreen3","darkorchid1","firebrick","gold1","aquamarine2","brown2","darkseagreen3","black"),k = 13) %>%
set("labels_cex", 0.8)  %>%
set("leaves_pch", 19)  %>%
set("nodes_cex", 0.4) %>%
plot(axes=FALSE)
# Add the colored bar
colored_bars(colors = my_colors, dend = hcd, rowLabels = "tribe")
legend("topright", legend=levels(tribe), col= c("cyan", "yellow", "green", "red"), pch=15)
mat <- matrix(c(4,5,0,1,1,2,1,1,3), 3)
layout(mat, widths=c(1,1,1), heights=c(1,1,1))# set the size of the rows and columns
par(mar=c(4, 4, 1, 1)) # sets the margins
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,2], col=subfam, asp=T, las=1,pch=16, cex=1.5)
PCA1 <-plotTangentSpace(proD2$coords, groups=subfam, legend=T)
proD2<-gpagen(landmark2, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
landmark2 = readland.tps("DATA_GEL_ICH.tps",specID = "ID", readcurves = F, warnmsg = TRUE)
landmark = readland.tps("DATA_GEL_ICH.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
landmark2 = readland.tps("DATA_GEL_ICH.tps",specID = "ID", readcurves = F, warnmsg = TRUE)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
areolet = as.factor( substr( dimnames(landmark)[[3]], 15, 15))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark = readland.tps("DATA_GEL_ICH.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
landmark2 = readland.tps("DATA_GEL_ICH.tps",specID = "ID", readcurves = F, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
areolet = as.factor( substr( dimnames(landmark)[[3]], 15, 15))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders = define.sliders(c(15,22:29,16))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD<-gpagen(landmark, surfaces = NULL, curves = sliders,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD2<-gpagen(landmark2, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
PCA <-plotTangentSpace(proD$coords, groups=subfam, legend=T)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
# use the text() function to get the names of individual points
text(PCA$pc.scores[,1],PCA$pc.scores[,2],labels=species,cex=0.7,pos=4)
dev.off()
PCA1 <-plotTangentSpace(proD2$coords, groups=subfam, legend=T)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
text(PCA1$pc.scores[,1],PCA1$pc.scores[,2],labels=species,cex=0.7,pos=4)
mat <- matrix(c(4,5,0,1,1,2,1,1,3), 3)
layout(mat, widths=c(1,1,1), heights=c(1,1,1))# set the size of the rows and columns
par(mar=c(4, 4, 1, 1)) # sets the margins
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,2], col=subfam, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam), col=palette(), pch=rep(19,14) )
## the more beautiful version:
mat <- matrix(c(4,5,0,1,1,2,1,1,3), 3)
layout(mat, widths=c(1,1,1), heights=c(1,1,1))# set the size of the rows and columns
par(mar=c(4, 4, 1, 1)) # sets the margins
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,2], col=subfam, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam), col=palette(), pch=rep(19,14) )
segments(min(PCA1$pc.scores[,1]), 0,  max(PCA1$pc.scores[,1]),0, col="grey", lty="dashed")
segments(0, min(PCA1$pc.scores[,2]), 0,  max(PCA1$pc.scores[,2]), col="grey", lty="dashed")
# in order to name individuals: text(PCA$pc.scores[,1],PCA$pc.scores[,2], species)
ref <- mshape(proD$coords)
#qw= c(1,4,2,6,5,7,3)
par(mar = c(0,0,0,0)) # sets the margins
plotRefToTarget(ref,PCA1$pc.shapes$PC1min)
## the more beautiful version:
mat <- matrix(c(4,5,0,1,1,2,1,1,3), 3)
layout(mat, widths=c(1,1,1), heights=c(1,1,1))# set the size of the rows and columns
par(mar=c(4, 4, 1, 1)) # sets the margins
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,2], col=subfam, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam), col=palette(), pch=rep(19,14) )
segments(min(PCA1$pc.scores[,1]), 0,  max(PCA1$pc.scores[,1]),0, col="grey", lty="dashed")
segments(0, min(PCA1$pc.scores[,2]), 0,  max(PCA1$pc.scores[,2]), col="grey", lty="dashed")
# in order to name individuals: text(PCA$pc.scores[,1],PCA$pc.scores[,2], species)
ref <- mshape(proD$coords)
#qw= c(1,4,2,6,5,7,3)
par(mar = c(0,0,0,0)) # sets the margins
plotRefToTarget(ref,PCA1$pc.shapes$PC1min)
PCA <-plotTangentSpace(proD$coords, groups=subfam, legend=T)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
# use the text() function to get the names of individual points
text(PCA$pc.scores[,1],PCA$pc.scores[,2],labels=species,cex=0.7,pos=4)
PCA <-plotTangentSpace(proD$coords, groups=subfam, legend=T, title(main = "Gelinae vs Ichneumoninae", sub= "with Curves LM 22:29"))
PCA <-plotTangentSpace(proD$coords, groups=subfam, legend=T, title(main = "Gelinae vs Ichneumoninae", sub= "with Curves LM 22:29"))
PCA <-plotTangentSpace(proD$coords, groups=subfam, legend=T)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
# use the text() function to get the names of individual points
text(PCA$pc.scores[,1],PCA$pc.scores[,2],labels=species,cex=0.7,pos=4)
dev.off()
PCA <-plotTangentSpace(proD$coords, groups=subfam, legend=T)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
# use the text() function to get the names of individual points
text(PCA$pc.scores[,1],PCA$pc.scores[,2],labels=species,cex=0.7,pos=4)
title(main = "Gelinae vs Ichneumoninae", sub= "with Curves LM 22:29")
PCA <-plotTangentSpace(proD$coords, groups=subfam, legend=T)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
title(main = "Gelinae vs Ichneumoninae", sub= "with Curves LM 22:29")
# use the text() function to get the names of individual points
text(PCA$pc.scores[,1],PCA$pc.scores[,2],labels=species,cex=0.7,pos=4)
dev.off()
PCA <-plotTangentSpace(proD$coords, groups=subfam, legend=T)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
title(main = "Gelinae vs Ichneumoninae", sub= "with Curves LM 22:29")
# use the text() function to get the names of individual points
text(PCA$pc.scores[,1],PCA$pc.scores[,2],labels=species,cex=0.7,pos=4)
## the more beautiful version:
mat <- matrix(c(4,5,0,1,1,2,1,1,3), 3)
layout(mat, widths=c(1,1,1), heights=c(1,1,1))# set the size of the rows and columns
par(mar=c(4, 4, 1, 1)) # sets the margins
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,2], col=subfam, asp=T, las=1,pch=16, cex=1.5)
legend("topright", legend= levels(subfam), col=palette(), pch=rep(19,14) )
segments(min(PCA1$pc.scores[,1]), 0,  max(PCA1$pc.scores[,1]),0, col="grey", lty="dashed")
segments(0, min(PCA1$pc.scores[,2]), 0,  max(PCA1$pc.scores[,2]), col="grey", lty="dashed")
# in order to name individuals: text(PCA$pc.scores[,1],PCA$pc.scores[,2], species)
ref <- mshape(proD2$coords)
#qw= c(1,4,2,6,5,7,3)
par(mar = c(0,0,0,0)) # sets the margins
plotRefToTarget(ref,PCA1$pc.shapes$PC1min)
# Item 3
plotRefToTarget(ref,PCA1$pc.shapes$PC1max)
# Item 4
plotRefToTarget(ref,PCA1$pc.shapes$PC2max)
# Item 5
plotRefToTarget(ref,PCA1$pc.shapes$PC2min)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
require(rgl)
options(rgl.useNULL = TRUE) # Suppress the separate window.
knitr::knit_hooks$set(webgl = hook_webgl)
library(geomorph)
setwd("~/GitHub/Ichneumonidae/R-Scripts")
setwd("~/GitHub/Ichneumonidae/R-Scripts")
landmark = readland.tps("Curve_Testfile.tps",specID = "ID", readcurves = T, warnmsg = TRUE)
landmark2 = readland.tps("Curve_Testfile.tps",specID = "ID", readcurves = F, warnmsg = TRUE)
##      define classifiers (subfam or tribes)
species = as.factor( substr( dimnames(landmark)[[3]], 1, 6))
subfam = as.factor( substr( dimnames(landmark)[[3]], 8, 13))
areolet = as.factor( substr( dimnames(landmark)[[3]], 15, 15))
tribe = as.factor( substr( dimnames(landmark)[[3]], 17, 19))
##      define Semilandmarks, first LM is the start, last one the end (those are both
##      fixed landmarks, in between are the semilandmarks):
sliders0 = define.sliders(c(10,22:29,11))
sliders1 = define.sliders(c(15,30:37,16))
sliders2 = define.sliders(c(13,38:45,4))
sliders3 = rbind(define.sliders(c(15,30:37,16)),define.sliders(c(10,22:29,11)))
sliders4 = rbind(define.sliders(c(13,38:45,4)),define.sliders(c(10,22:29,11)))
sliders5 = rbind(define.sliders(c(13,38:45,4)),define.sliders(c(15,30:37,16)))
sliders6 = rbind(define.sliders(c(13,38:45,4)),define.sliders(c(15,30:37,16)),define.sliders(c(10,22:29,11)))
##      procrustes fit - "superimposition" - rotates and scales the landmarks to their closest distance,
##      minimizing the shape and size difference:
proD0<-gpagen(landmark, surfaces = NULL, curves = sliders0,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD1<-gpagen(landmark, surfaces = NULL, curves = sliders1,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD2<-gpagen(landmark, surfaces = NULL, curves = sliders2,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD3<-gpagen(landmark, surfaces = NULL, curves = sliders3,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD4<-gpagen(landmark, surfaces = NULL, curves = sliders4,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD5<-gpagen(landmark, surfaces = NULL, curves = sliders5,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD6<-gpagen(landmark, surfaces = NULL, curves = sliders6,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
proD7<-gpagen(landmark2, surfaces = NULL,
PrinAxes = FALSE, max.iter = NULL, ProcD = F, Proj = TRUE,
print.progress = TRUE)
PCA0 <-plotTangentSpace(proD7$coords, groups=subfam, legend=T)
#one can look at different PCA combinations to find the best model for its purpose
plot(PCA0$pc.scores[,1],PCA0$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
# use the text() function to get the names of individual points
text(PCA0$pc.scores[,1],PCA0$pc.scores[,2],labels=species,cex=0.7,pos=4)
PCA0 <-plotTangentSpace(proD7$coords, groups=tribe, legend=T)
#one can look at different PCA combinations to find the best model for its purpose
plot(PCA0$pc.scores[,1],PCA0$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
# use the text() function to get the names of individual points
text(PCA0$pc.scores[,1],PCA0$pc.scores[,2],labels=species,cex=0.7,pos=4)
PCA0 <-plotTangentSpace(proD7$coords, groups=tribe, legend=T)
PCA1 <-plotTangentSpace(proD0$coords, groups=tribe, legend=T)
PCA2 <-plotTangentSpace(proD1$coords, groups=tribe, legend=T)
PCA3 <-plotTangentSpace(proD2$coords, groups=tribe, legend=T)
PCA4 <-plotTangentSpace(proD3$coords, groups=tribe, legend=T)
PCA5 <-plotTangentSpace(proD4$coords, groups=tribe, legend=T)
PCA6 <-plotTangentSpace(proD5$coords, groups=tribe, legend=T)
PCA7 <-plotTangentSpace(proD6$coords, groups=tribe, legend=T)
PCA0 <-plotTangentSpace(proD7$coords, groups=tribe, legend=T)
par(c(2,3))
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
plot(PCA2$pc.scores[,1],PCA2$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
plot(PCA3$pc.scores[,1],PCA3$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
plot(PCA4$pc.scores[,1],PCA4$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
plot(PCA5$pc.scores[,1],PCA5$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
plot(PCA6$pc.scores[,1],PCA6$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
par(mar = c(2,3, .1, .1))
plot(PCA1$pc.scores[,1],PCA1$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
legend("topright", legend= levels(tribe), col=palette(), pch=rep(19,14) )
plot(PCA2$pc.scores[,1],PCA2$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
plot(PCA3$pc.scores[,1],PCA3$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
plot(PCA4$pc.scores[,1],PCA4$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
plot(PCA5$pc.scores[,1],PCA5$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
plot(PCA6$pc.scores[,1],PCA6$pc.scores[,2], col=tribe, asp=T, las=1,pch=16, cex=1.3)
